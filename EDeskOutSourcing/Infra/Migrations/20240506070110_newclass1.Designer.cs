// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(EDeskContext))]
    [Migration("20240506070110_newclass1")]
    partial class newclass1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("AdminTable");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityId"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("CityTable");
                });

            modelBuilder.Entity("Core.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CityId");

                    b.ToTable("CompanyTable");
                });

            modelBuilder.Entity("Core.CompanyFAQ", b =>
                {
                    b.Property<long>("CompanyFAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyFAQId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAQ")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyFAQId");

                    b.ToTable("CompanyFAQTable");
                });

            modelBuilder.Entity("Core.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryId"));

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("CountryTable");
                });

            modelBuilder.Entity("Core.Education", b =>
                {
                    b.Property<long>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EducationId"));

                    b.Property<string>("EducationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EducationType")
                        .HasColumnType("int");

                    b.HasKey("EducationId");

                    b.ToTable("EducationTable");
                });

            modelBuilder.Entity("Core.FinishedProject", b =>
                {
                    b.Property<long>("FinishedProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FinishedProjectId"));

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinishedRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("FinishedProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FinishedProjectTable");
                });

            modelBuilder.Entity("Core.Freelancer", b =>
                {
                    b.Property<long>("FreelancerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerId");

                    b.ToTable("FreelancerTable");
                });

            modelBuilder.Entity("Core.FreelancerCertifications", b =>
                {
                    b.Property<long>("FreelancerCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerCertificationId"));

                    b.Property<string>("CertificateTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnivercityInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerCertificationId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerCertificationTable");
                });

            modelBuilder.Entity("Core.FreelancerEducation", b =>
                {
                    b.Property<long>("FreelancerEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerEducationId"));

                    b.Property<long>("EducationId")
                        .HasColumnType("bigint");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnivercityInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerEducationId");

                    b.HasIndex("EducationId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerEducationTable");
                });

            modelBuilder.Entity("Core.FreelancerExperience", b =>
                {
                    b.Property<long>("FreelancerExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerExperienceId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceInMonths")
                        .HasColumnType("int");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FreelancerExperienceId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerExperienceTable");
                });

            modelBuilder.Entity("Core.FreelancerFAQ", b =>
                {
                    b.Property<long>("FreelancerFAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerFAQId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAQ")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerFAQId");

                    b.ToTable("FreelancerFAQTable");
                });

            modelBuilder.Entity("Core.FreelancerPriviousProjects", b =>
                {
                    b.Property<long>("FreelancerPriviousProjectsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerPriviousProjectsId"));

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerPriviousProjectsId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerPriviousProjectsTable");
                });

            modelBuilder.Entity("Core.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.ToTable("LocationTable");
                });

            modelBuilder.Entity("Core.PaymentMode", b =>
                {
                    b.Property<long>("PaymentModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentModeId"));

                    b.Property<string>("PayMode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentModeId");

                    b.ToTable("PaymentModeTable");
                });

            modelBuilder.Entity("Core.Project", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectId"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ExpectedCompletionDurationInDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectPaymentTerms")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProjectTermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProjectTable");
                });

            modelBuilder.Entity("Core.ProjectApplications", b =>
                {
                    b.Property<long>("ProjectApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectApplicationId"));

                    b.Property<DateTime>("ApplicationId")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectApplicationId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectApplicationsTable");
                });

            modelBuilder.Entity("Core.ProjectAssigned", b =>
                {
                    b.Property<long>("ProjectAssignedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectAssignedId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SelectedApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SelectedApplicationsSelectedApplicationId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectAssignedId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SelectedApplicationsSelectedApplicationId");

                    b.ToTable("ProjectAssignedTable");
                });

            modelBuilder.Entity("Core.ProjectDocument", b =>
                {
                    b.Property<long>("ProjectDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectDocumentId"));

                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectDocumentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocumentTable");
                });

            modelBuilder.Entity("Core.ProjectSkill", b =>
                {
                    b.Property<long>("ProjectSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectSkillId"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectSkillId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProjectSkillTable");
                });

            modelBuilder.Entity("Core.ProjectStage", b =>
                {
                    b.Property<long>("ProjectStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectStageId"));

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectStageId1")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectStageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectStageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectStageId1");

                    b.ToTable("ProjectStagesTable");
                });

            modelBuilder.Entity("Core.ProjectTask", b =>
                {
                    b.Property<long>("ProjectTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskId"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaskAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTaskTable");
                });

            modelBuilder.Entity("Core.ProjectTaskAssignment", b =>
                {
                    b.Property<long>("ProjectTaskAssignementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskAssignementId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FreelancerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskAssignementId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskAssignmentTable");
                });

            modelBuilder.Entity("Core.ProjectTaskDocument", b =>
                {
                    b.Property<long>("ProjectTaskDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskDocumentId"));

                    b.Property<string>("ProjectDocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskDocumentId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskDocumentTable");
                });

            modelBuilder.Entity("Core.ProjectTaskQuery", b =>
                {
                    b.Property<long>("ProjectTaskQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskQueryId"));

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<long>("ProjectTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskQueryId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskQueryTable");
                });

            modelBuilder.Entity("Core.ProjectTaskQuerySolution", b =>
                {
                    b.Property<long>("ProjectTaskQuerySolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskQuerySolutionId"));

                    b.Property<long>("ProjectTaskQueryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskQuerySolutionId");

                    b.HasIndex("ProjectTaskQueryId");

                    b.ToTable("ProjectTaskQuerySolutionTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReport", b =>
                {
                    b.Property<long>("ProjectTaskReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportId"));

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<long>("ProjectTaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskReportId");

                    b.HasIndex("ProjectTaskAssignmentId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskReportTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReportConflict", b =>
                {
                    b.Property<long>("ProjectTaskReportConflictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportConflictId"));

                    b.Property<DateTime>("ConflictDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConflictRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectTaskReportId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportConflictId");

                    b.HasIndex("ProjectTaskReportId");

                    b.ToTable("ProjectTaskReportConflictTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReportConflictSolution", b =>
                {
                    b.Property<long>("ProjectTaskReportConflictSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportConflictSolutionId"));

                    b.Property<long>("ProjectTaskReportConflictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskReportConflictSolutionId");

                    b.HasIndex("ProjectTaskReportConflictId");

                    b.ToTable("ProjectTaskReportConflictSolutionTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePayment", b =>
                {
                    b.Property<long>("ProjectTaskReportReleasePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportReleasePaymentId"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProjectTaskReportId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportReleasePaymentId");

                    b.HasIndex("ProjectTaskReportId");

                    b.ToTable("ProjectTaskReportReleasePaymentTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePaymentConflict", b =>
                {
                    b.Property<long>("ProjectTaskReportReleasePaymentConflictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportReleasePaymentConflictId"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProjectTaskReportId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportReleasePaymentConflictId");

                    b.HasIndex("ProjectTaskReportId");

                    b.ToTable("ProjectTaskReportReleasePaymentConflictTable");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePaymentConflictSolution", b =>
                {
                    b.Property<long>("ProjectTaskReportReleasePaymentConflictSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportReleasePaymentConflictSolutionId"));

                    b.Property<long>("ProjectTaskReportReleasePaymentConflictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskReportReleasePaymentConflictSolutionId");

                    b.HasIndex("ProjectTaskReportReleasePaymentConflictId");

                    b.ToTable("ProjectTaskReportReleasePaymentConflictSolutionTable");
                });

            modelBuilder.Entity("Core.ProjectTechnology", b =>
                {
                    b.Property<long>("ProjectTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTechnologyId"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnologiesId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTechnologyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechnologiesId");

                    b.ToTable("ProjectTechnology");
                });

            modelBuilder.Entity("Core.SelectedApplications", b =>
                {
                    b.Property<long>("SelectedApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SelectedApplicationId"));

                    b.Property<string>("AnyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NeedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectApplicationsProjectApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SelectedApplicationId");

                    b.HasIndex("ProjectApplicationsProjectApplicationId");

                    b.ToTable("SelectedApplicationTable");
                });

            modelBuilder.Entity("Core.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillId"));

                    b.Property<long>("SkillCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillTable");
                });

            modelBuilder.Entity("Core.SkillCategory", b =>
                {
                    b.Property<long>("SkillCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillCategoryId"));

                    b.Property<string>("SkillCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillCategoryId");

                    b.ToTable("SkillCategoryTable");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateId"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("StateTable");
                });

            modelBuilder.Entity("Core.TNCCompany", b =>
                {
                    b.Property<long>("TNCCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TNCCompanyId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyRule")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TNCCompanyId");

                    b.ToTable("TermsAndConditionsForCompany");
                });

            modelBuilder.Entity("Core.TNCFreelancer", b =>
                {
                    b.Property<long>("TNCFreelancerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TNCFreelancerId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerRule")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TNCFreelancerId");

                    b.ToTable("TermsAndConditionsForFreelancer");
                });

            modelBuilder.Entity("Core.Technologies", b =>
                {
                    b.Property<long>("TechnologiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TechnologiesId"));

                    b.Property<string>("TechnologyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnologiesId");

                    b.ToTable("TechnologiesTable");
                });

            modelBuilder.Entity("Core.TerminatedProject", b =>
                {
                    b.Property<long>("TerminatedProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TerminatedProjectId"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerminatedProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TerminatedProjectTable");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.HasOne("Core.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Company", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.FinishedProject", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.FreelancerCertifications", b =>
                {
                    b.HasOne("Core.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Core.FreelancerEducation", b =>
                {
                    b.HasOne("Core.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Core.FreelancerExperience", b =>
                {
                    b.HasOne("Core.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Core.FreelancerPriviousProjects", b =>
                {
                    b.HasOne("Core.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Core.Location", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.Project", b =>
                {
                    b.HasOne("Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.ProjectApplications", b =>
                {
                    b.HasOne("Core.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.ProjectAssigned", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.SelectedApplications", "SelectedApplications")
                        .WithMany()
                        .HasForeignKey("SelectedApplicationsSelectedApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("SelectedApplications");
                });

            modelBuilder.Entity("Core.ProjectDocument", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.ProjectSkill", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Core.ProjectStage", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.ProjectStage", null)
                        .WithMany("ProjectStages")
                        .HasForeignKey("ProjectStageId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.ProjectTask", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.ProjectTaskAssignment", b =>
                {
                    b.HasOne("Core.Freelancer", "Freelaner")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelaner");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Core.ProjectTaskDocument", b =>
                {
                    b.HasOne("Core.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Core.ProjectTaskQuery", b =>
                {
                    b.HasOne("Core.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Core.ProjectTaskQuerySolution", b =>
                {
                    b.HasOne("Core.ProjectTaskQuery", "ProjectTaskQuery")
                        .WithMany()
                        .HasForeignKey("ProjectTaskQueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskQuery");
                });

            modelBuilder.Entity("Core.ProjectTaskReport", b =>
                {
                    b.HasOne("Core.ProjectTaskAssignment", "ProjectTaskAssignment")
                        .WithMany()
                        .HasForeignKey("ProjectTaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskAssignment");
                });

            modelBuilder.Entity("Core.ProjectTaskReportConflict", b =>
                {
                    b.HasOne("Core.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany()
                        .HasForeignKey("ProjectTaskReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("Core.ProjectTaskReportConflictSolution", b =>
                {
                    b.HasOne("Core.ProjectTaskReportConflict", "ProjectTaskReportConflict")
                        .WithMany()
                        .HasForeignKey("ProjectTaskReportConflictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReportConflict");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePayment", b =>
                {
                    b.HasOne("Core.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany()
                        .HasForeignKey("ProjectTaskReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePaymentConflict", b =>
                {
                    b.HasOne("Core.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany()
                        .HasForeignKey("ProjectTaskReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("Core.ProjectTaskReportReleasePaymentConflictSolution", b =>
                {
                    b.HasOne("Core.ProjectTaskReportReleasePaymentConflict", "GetProjectTaskReportReleasePaymentConflict")
                        .WithMany()
                        .HasForeignKey("ProjectTaskReportReleasePaymentConflictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GetProjectTaskReportReleasePaymentConflict");
                });

            modelBuilder.Entity("Core.ProjectTechnology", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Technologies", "Technologies")
                        .WithMany()
                        .HasForeignKey("TechnologiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Core.SelectedApplications", b =>
                {
                    b.HasOne("Core.ProjectApplications", "ProjectApplications")
                        .WithMany()
                        .HasForeignKey("ProjectApplicationsProjectApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProjectApplications");
                });

            modelBuilder.Entity("Core.Skill", b =>
                {
                    b.HasOne("Core.SkillCategory", "SkillCategory")
                        .WithMany()
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.HasOne("Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.TerminatedProject", b =>
                {
                    b.HasOne("Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.ProjectStage", b =>
                {
                    b.Navigation("ProjectStages");
                });
#pragma warning restore 612, 618
        }
    }
}
